import imaplib
import email
import smtplib
import joblib
import time
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from email.message import EmailMessage
from email.header import decode_header
from preprocessamento import TextPreprocessor
import config

EMAIL_USER = config.EMAIL_CONFIG["USER"]
EMAIL_PASS = config.EMAIL_CONFIG["PASS"]
IMAP_SERVER = config.EMAIL_CONFIG["IMAP_SERVER"]
SMTP_SERVER = config.EMAIL_CONFIG["SMTP_SERVER"]
CHECK_INTERVAL = config.APP_CONFIG["CHECK_INTERVAL"]

try:
    server = smtplib.SMTP_SSL('smtp.gmail.com', 465, timeout=10)
    server.login('triagem.ctrlaltesc@gmail.com', 'tpgq zcbw icmg mfax')
    print("‚úÖ Login bem-sucedido!")
    server.quit()
except Exception as e:
    print(f"‚ùå Falha: {e}")


def decode_email_header(header):
    """Decodifica cabe√ßalhos de e-mail com caracteres especiais."""
    decoded_parts = []
    for part, encoding in decode_header(header):
        if isinstance(part, bytes):
            decoded_parts.append(part.decode(encoding or 'utf-8'))
        else:
            decoded_parts.append(str(part))
    return ' '.join(decoded_parts)

# Carregar modelo
try:
    modelo = joblib.load(config.APP_CONFIG["MODEL_FILE"])
    preprocessor = joblib.load(config.APP_CONFIG["PREPROCESSOR_FILE"])
except Exception as e:
    print(f"‚ùå Erro ao carregar modelo: {e}")
    exit()

def is_problem_paragraph(text):
    """Verifica se o texto descreve um problema t√©cnico"""
    text_lower = text.lower()
    problem_keywords = [
        'problema', 'erro', 'dificuldade', 'n√£o funciona', 
        'n√£o est√°', 'falha', 'travando', 'lento', 'quebrado',
        'defeito', 'assist√™ncia', 'suporte', 'bug', 'crash',
        'n√£o abre', 'n√£o roda', 'n√£o liga', 'n√£o reconhece',
        'n√£o responde', 'n√£o carrega', 'n√£o conecta',
        'piscando', 'fechando', 'fecha sozinho'
    ]
    return any(keyword in text_lower for keyword in problem_keywords)

def is_general_text(text):
    """Identifica textos gen√©ricos que n√£o s√£o problemas t√©cnicos"""
    text_lower = text.lower()
    general_phrases = [
        'ol√°', 'oi ', 'ola ', 'bom dia', 'boa tarde', 'boa noite',
        'atenciosamente', 'obrigado', 'grato', 'agrade√ßo',
        'por favor', 'preciso de ajuda', 'urgente', 'quanto antes',
        'favor', 'contato', 'retorno', 'resposta', 'ajuda',
        'att', 'cordialmente', 'desde j√° agrade√ßo'
    ]
    return any(phrase in text_lower for phrase in general_phrases)

def detect_multiple_issues(body):
    """Identifica par√°grafos que descrevem problemas reais"""
    body = body.replace('\r\n', '\n').replace('\r', '\n')
    paragraphs = [p.strip() for p in body.split('\n\n') if p.strip()]
    
    problem_paragraphs = []
    for para in paragraphs:
        if len(para.split()) < 5 or is_general_text(para):
            continue
            
        if is_problem_paragraph(para):
            problem_paragraphs.append(para)
    
    if len(problem_paragraphs) < 1:
        return None
    
    issues = []
    for para in problem_paragraphs:
        category = classify_email("", para)
        issues.append((para, category))
    
    return issues

def classify_email(subject, body):
    texto = f"{subject} {body}".lower()
    
    # Regras manuais priorit√°rias - Balanceadas
    hardware_terms = [
        'monitor', 'tela', 'piscando', 'quebrad', 'danificad', 
        'fisic', 'n√£o liga', 'hardware', 'hd', 'ssd', 'mem√≥ria', 
        'ram', 'processador', 'mouse', 'teclado', 'cabo', 'conector'
    ]
    
    software_terms = [
        'excel', 'fechando', 'programa', 'aplicativo', 'n√£o abre', 
        'n√£o roda', 'crash', 'travando', 'lento', 'erro', 'bug',
        'software', 'sistema', 'windows', 'instalar', 'atualiza√ß√£o',
        'formula', 'planilha', 'word', 'powerpoint', 'aplica√ß√£o'
    ]
    
    # Contagem de termos para balanceamento
    hardware_count = sum(1 for term in hardware_terms if term in texto)
    software_count = sum(1 for term in software_terms if term in texto)
    
    if hardware_count > 0 or software_count > 0:
        if hardware_count > software_count:
            return "hardware"
        elif software_count > hardware_count:
            return "software"
    
    # Se empate ou nenhum termo espec√≠fico, verifica regras manuais
    if any(term in texto for term in ['lento', 'lentid√£o', 'travando', 'congelando']):
        return "software"
    elif any(palavra in texto for palavra in ['wifi', 'internet', 'rede']):
        if any(termo in texto for termo in ['antena', 'placa', 'fisic']):
            return "hardware"
        return "software"
    
    # Classifica√ß√£o pelo modelo ML
    try:
        texto_processado = preprocessor.preprocess(texto)
        return modelo.predict([texto_processado])[0]
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no modelo: {e}")
        return "indefinido"

def connect_imap():
    mail = imaplib.IMAP4_SSL(IMAP_SERVER, timeout=30)
    mail.login(EMAIL_USER, EMAIL_PASS)
    mail.select("inbox")
    return mail

def get_unread_emails(mail):
    _, messages = mail.search(None, "UNSEEN")
    return messages[0].split()

def extract_email_content(mail, email_id):
    try:
        _, data = mail.fetch(email_id, "(RFC822)")
        raw_email = data[0][1]
        msg = email.message_from_bytes(raw_email)
        
        subject = decode_email_header(msg["Subject"]) if msg["Subject"] else "Sem assunto"
        sender = decode_email_header(msg["From"])
        
        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    body = part.get_payload(decode=True).decode(errors='ignore')
                    break
        else:
            body = msg.get_payload(decode=True).decode(errors='ignore')
        
        return {
            "id": email_id,
            "subject": subject,
            "sender": sender,
            "body": body
        }
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao extrair e-mail: {e}")
        return None

def forward_email(original_email, category):
    try:
        # Adicione este timeout:
        with smtplib.SMTP_SSL(SMTP_SERVER, 465, timeout=10) as server:
            server.login(EMAIL_USER, EMAIL_PASS)
        recipient = recipient = config.EMAIL_CONFIG["SOFTWARE_TEAM"] if category == "software" else config.EMAIL_CONFIG["HARDWARE_TEAM"]
        msg = EmailMessage()
        msg["From"] = EMAIL_USER
        msg["To"] = recipient
        msg["Subject"] = f"[{category.upper()}] {original_email['subject'][:50]}..."
        
        email_body = f"De: {original_email['sender']}\n\n"
        email_body += f"Problema relatado ({category.upper()}):\n\n"
        email_body += f"{original_email['body']}\n\n"
        email_body += f"---\nAssunto original: {original_email['subject']}"
        
        msg.set_content(email_body)
        
        with smtplib.SMTP_SSL(SMTP_SERVER, 465) as server:
            server.login(EMAIL_USER, EMAIL_PASS)
            server.send_message(msg)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao encaminhar: {e}")

def log_to_spreadsheet(email_data, category):
    """Registra o ticket na planilha Google Sheets correspondente."""
    try:
        # Configura√ß√£o da autentica√ß√£o
        scope = scope = config.SHEETS_CONFIG["SCOPE"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(config.SHEETS_CONFIG["CREDENTIALS_FILE"], scope)
        client = gspread.authorize(creds)

        # Seleciona a planilha correta
        sheet_name = "Tickets_Software" if category == "software" else "Tickets_Hardware"
        sheet = client.open(sheet_name).sheet1

        # Extrai nome e e-mail do remetente
        sender_name = email_data["sender"].split("<")[0].strip()
        sender_email = email_data["sender"].split("<")[-1].replace(">", "").strip()

        # Dados a serem inseridos
        row_data = [
            sender_name,
            sender_email,
            datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            email_data["subject"]
        ]

        # Adiciona nova linha
        sheet.append_row(row_data)
        print(f"‚úÖ Log adicionado na planilha {sheet_name}")

    except Exception as e:
        print(f"‚ö†Ô∏è Falha ao registrar na planilha: {e}")

def send_automatic_reply(original_email, category):
    try:
        sender_name = original_email["sender"].split()[0]
        sender_name = ''.join(c for c in sender_name if c.isalpha())
        
        msg = EmailMessage()
        msg["From"] = EMAIL_USER
        msg["To"] = original_email["sender"]
        msg["Subject"] = f"‚úî Ticket recebido - Suporte {category.upper()}"
        
        if category == "software":
            content = f"""Ol√° {sender_name},

Seu ticket foi classificado como SOFTWARE e j√° foi encaminhado para nossa equipe especializada.

üìÖ Prazo de resposta: 2 horas √∫teis
üîç Descri√ß√£o do problema: "{original_email['subject']}"

Agradecemos pela paci√™ncia!
Equipe CtrlAltEsc"""
        elif category == "hardware":
            content = f"""Ol√° {sender_name},

Seu ticket foi classificado como HARDWARE e est√° sendo processado por nossos t√©cnicos.

üìÖ Prazo de resposta: 4 horas √∫teis
üîß Descri√ß√£o do problema: "{original_email['subject']}"

Atenciosamente,
Equipe CtrlAltEsc"""
        else:
            content = f"""Ol√° {sender_name},

Recebemos seu ticket e estamos analisando a melhor equipe para atend√™-lo.

üìÖ Prazo de resposta: 1 dia √∫til
üìù Descri√ß√£o do problema: "{original_email['subject']}"

Obrigado por nos contatar!
Equipe CtrlAltEsc"""

        msg.set_content(content)
        
        with smtplib.SMTP_SSL(SMTP_SERVER, 465) as server:
            server.login(EMAIL_USER, EMAIL_PASS)
            server.send_message(msg)
        
        log_to_spreadsheet(original_email, category)  # Novo log!

    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao enviar resposta autom√°tica: {e}")

def send_multiple_issue_reply(original_email, issues):
    try:
        msg = EmailMessage()
        msg["From"] = EMAIL_USER
        msg["To"] = original_email["sender"]
        msg["Subject"] = "‚úî Seus problemas t√©cnicos foram triados"
        
        body_lines = [
            "Ol√°,",
            "",
            "Identificamos os seguintes problemas t√©cnicos em seu e-mail:",
            ""
        ]
        
        for i, (text, category) in enumerate(issues, 1):
            team = "SOFTWARE" if category == "software" else "HARDWARE"
            body_lines.append(f"üîπ Problema {i} (Equipe de {team}):")
            body_lines.append(f'"{text[:150]}..."')
            body_lines.append("")
        
        body_lines.extend([
            "Prazos estimados para resolu√ß√£o:",
            "",
            "üñ•Ô∏è SOFTWARE: Resposta em at√© 2 horas √∫teis",
            "üîß HARDWARE: Resposta em at√© 4 horas √∫teis",
            "",
            "Agradecemos pela compreens√£o!",
            "Equipe CtrlAltEsc"
        ])
        
        msg.set_content("\n".join(body_lines))
        
        with smtplib.SMTP_SSL(SMTP_SERVER, 465) as server:
            server.login(EMAIL_USER, EMAIL_PASS)
            server.send_message(msg)
        
        for _, category in issues:
            log_to_spreadsheet(original_email, category)  # Log para cada problema

    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao enviar resposta: {e}")

def mark_as_read(mail, email_id):
    mail.store(email_id, "+FLAGS", "\\Seen")

def process_emails():
    try:
        mail = connect_imap()
        emails = get_unread_emails(mail)
        
        for email_id in emails:
            email_data = extract_email_content(mail, email_id)
            if not email_data:
                continue
                
            print(f"\nüì© Novo e-mail: {email_data['subject']}")
            print(f"üë§ Remetente: {email_data['sender']}")
            
            print("üîç An√°lise de par√°grafos:")
            body = email_data['body'].replace('\r\n', '\n').replace('\r', '\n')
            paragraphs = [p.strip() for p in body.split('\n\n') if p.strip()]
            
            for i, p in enumerate(paragraphs[:5], 1):
                status = "‚úÖ PROBLEMA" if is_problem_paragraph(p) else "‚è≠Ô∏è IGNORADO"
                print(f"   {i}. [{status}] {p[:80]}{'...' if len(p) > 80 else ''}")
            
            multiple_issues = detect_multiple_issues(email_data["body"])
            
            if multiple_issues and len(multiple_issues) >= 2:
                print("üîß M√∫ltiplos problemas detectados:")
                for i, (text, category) in enumerate(multiple_issues, 1):
                    print(f"   {i}. [{category.upper()}] {text[:80]}...")
                
                for text, category in multiple_issues:
                    partial_email = {
                        "id": email_data["id"],
                        "subject": f"[PARTE {category.upper()}] {email_data['subject']}",
                        "sender": email_data["sender"],
                        "body": text
                    }
                    forward_email(partial_email, category)
                
                send_multiple_issue_reply(email_data, multiple_issues)
            else:
                category = classify_email(email_data["subject"], email_data["body"])
                print(f"üîç Categoria √∫nica: {category}")
                forward_email(email_data, category)
                send_automatic_reply(email_data, category)
            
            mark_as_read(mail, email_id)
        
        mail.close()
        mail.logout()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro fatal: {e}")

if __name__ == "__main__":
    print("üîÑ Iniciando monitoramento de e-mails...")
    while True:
        process_emails()
        print(f"‚è≥ Aguardando {CHECK_INTERVAL} segundos...")
        time.sleep(CHECK_INTERVAL)